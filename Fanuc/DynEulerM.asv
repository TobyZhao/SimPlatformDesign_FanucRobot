%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%@Copyright(c),Googol Shenzhen Tech. Ltd
%@File Name: DynEulerM.m
%@Author: Dai Dan
%@Version: 1.0
%@Date: 30/5/2014
%
%@Function: DynEulerM
%@Description: Implementing Newton-Euler Recursion Algorithm to get computed torque, considering effects
%due to motor inertia and rotation. We only tackle the most common situation of 6 DoF serial manipulator
%that motor 1 in base link, motor 2 in link 1, motor 3 in link 2, motor 4 in link3, motor 5&6 in link 4.
%Actually for some type with heavier payload, motor 4,5&6 will all locate in the end of link 3. It is not
%trivial to consider a general case of different manipulators.
%Besides, we also concern about friction: viscious 
%@Input:
%DH: DH parameters
%Ma: augment link mass (link + motor)
%Cen: augment link masss center (link + motor)
%Ie: augment link inertia (link + motor)
%Imz: motor inertia along rotating axis, Im =[Imx 0 0;0 Imy 0 0;0 0 Imz]
%Zm: ith motor rotation axis related to i-1 joint frame
%k: reduction ratio
%Ft: generalized force exerted on endeffetor 
%Pos: joint angle
%Vel: joint velocity
%Acc: joint acceleration
%@Output:
%Tau: Torque

%Note: Refer to Siciliano's book: Robotics Modeling, Planning and Control
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Torque = DynEulerM(DH,Ma,Cen,Ie,Imz,Zm,k,Ft,Pos,Vel,Acc)

% %% Calculate kxi in corresponding joint frame, different from in base frame
w_o = [0;0;0];
w_z = [0;0;1];

kxi1 = [w_o;w_z];
kxi2 = [w_o;w_z];
kxi3 = [w_o;w_z];
kxi4 = [w_o;w_z];
kxi5 = [w_o;w_z];
kxi6 = [w_o;w_z];

% Motor positive direciton relative to joint frame, need to confirm
zm1 = Zm(:,1);
zm2 = Zm(:,2);
zm3 = Zm(:,3);
zm4 = Zm(:,4);
zm5 = Zm(:,5);
zm6 = Zm(:,6);

% %% Calculate initial configuration matrix g_{i-1,i}
% 0: means base frame;
% 1,2,3,4,5,6: means i-th joint frame, Ci
% 7: means endeffector frame
% DH=[266     300     0       0       1016     0      174;
%     0       0       -pi/2   0       pi      pi       0;
%     0       150     870     170     0       0        0;
%     0       -pi/2   0       -pi/2   -pi/2    -pi/2   0;];

ez = [0;0;1];
ex = [1;0;0];
eo = [0;0;0];

g01_0= expg([eo;ez],DH(2,1))*expg([ez;eo],DH(1,1))*expg([eo;ex],DH(4,1))*expg([ex;eo],DH(3,1));
g12_0= expg([eo;ez],DH(2,2))*expg([ez;eo],DH(1,2))*expg([eo;ex],DH(4,2))*expg([ex;eo],DH(3,2));
g23_0= expg([eo;ez],DH(2,3))*expg([ez;eo],DH(1,3))*expg([eo;ex],DH(4,3))*expg([ex;eo],DH(3,3));
g34_0= expg([eo;ez],DH(2,4))*expg([ez;eo],DH(1,4))*expg([eo;ex],DH(4,4))*expg([ex;eo],DH(3,4));
g45_0= expg([eo;ez],DH(2,5))*expg([ez;eo],DH(1,5))*expg([eo;ex],DH(4,5))*expg([ex;eo],DH(3,5));
g56_0= expg([eo;ez],DH(2,6))*expg([ez;eo],DH(1,6))*expg([eo;ex],DH(4,6))*expg([ex;eo],DH(3,6));
g67_0= expg([eo;ez],DH(2,7))*expg([ez;eo],DH(1,7))*expg([eo;ex],DH(4,7))*expg([ex;eo],DH(3,7));

% %% calculate ri: ith link mass center offset relative to ith joint frame,i=1,2,3,4,5,6

g=g01_0;
r1 = g\[Cen(1:3);1];
r1 = r1(1:3);
g=g*g12_0;
r2 = g\[Cen(4:6);1];
r2 = r2(1:3);
g=g*g23_0;
r3 = g\[Cen(7:9);1];
r3 = r3(1:3);
g=g*g34_0;
r4 = g\[Cen(10:12);1];
r4 = r4(1:3);
g=g*g45_0;
r5 = g\[Cen(13:15);1];
r5 = r5(1:3);
g=g*g56_0;
r6 = g\[Cen(16:18);1];
r6 = r6(1:3);

% %% calculate momentt of inertia in Ci,i=1,2,3,4,5,6
m1  = Ma(1);
I1  = reshape(Ie(1:9),3,3);
M1  = [ m1*eye(3),      -m1*hat(r1);
        m1*hat(r1),    I1 - m1*hat(r1)*hat(r1)];

m2  = Ma(2);
I2  = reshape(Ie(10:18),3,3);
M2  = [ m2*eye(3),      -m2*hat(r2);
        m2*hat(r2),    I2 - m2*hat(r2)*hat(r2)];

m3  = Ma(3);
I3  = reshape(Ie(19:27),3,3);
M3  = [ m3*eye(3),      -m3*hat(r3);
        m3*hat(r3),    I3 - m3*hat(r3)*hat(r3)];
    
m4  = Ma(4);
I4  = reshape(Ie(28:36),3,3);
M4  = [ m4*eye(3),      -m4*hat(r4);
        m4*hat(r4),    I4 - m4*hat(r4)*hat(r4)];
    
m5  = Ma(5);
I5  = reshape(Ie(37:45),3,3);
M5  = [ m5*eye(3),      -m5*hat(r5);
        m5*hat(r5),    I5 - m5*hat(r5)*hat(r5)];
    
m6  = Ma(6);
I6  = reshape(Ie(46:54),3,3);
M6  = [ m6*eye(3),      -m6*hat(r6);
        m6*hat(r6),    I6 - m6*hat(r6)*hat(r6)];    

% %% Forward Recursion (kinematic)
% Initial State
V0 = [0;0;0;0;0;0];
dV0 = [0;0;9.8;0;0;0];

% Joint 1:
g01 = g01_0 * expg(kxi1,Pos(1));
Adinvg01 = Adj(g01\eye(4));
V1  = Adinvg01 * V0 + kxi1*Vel(1);
dV1 = kxi1*Acc(1) +  Adinvg01 * dV0 - ad(kxi1*Vel(1))*(Adinvg01*V0);

% Joint 2:
g12 = g12_0 * expg(kxi2,Pos(2));
Adinvg12 = Adj(g12\eye(4));
V2  = Adinvg12 * V1 + kxi2*Vel(2);
dV2 = kxi2*Acc(2) +  Adinvg12 * dV1 - ad(kxi2*Vel(2))*(Adinvg12*V1);

% Joint 3:
g23 = g23_0 * expg(kxi3,Pos(3));
Adinvg23 = Adj(g23\eye(4));
V3  = Adinvg23 * V2 + kxi3*Vel(3);
dV3 = kxi3*Acc(3) +  Adinvg23 * dV2 - ad(kxi3*Vel(3))*(Adinvg23*V2);

% Joint 4:
g34 = g34_0 * expg(kxi4,Pos(4));
Adinvg34 = Adj(g34\eye(4));
V4  = Adinvg34 * V3 + kxi4*Vel(4);
dV4 = kxi4*Acc(4) +  Adinvg34 * dV3 - ad(kxi4*Vel(4))*(Adinvg34*V3);

% Joint 5:
g45 = g45_0 * expg(kxi5,Pos(5));
Adinvg45 = Adj(g45\eye(4));
V5  = Adinvg45 * V4 + kxi5*Vel(5);
dV5 = kxi5*Acc(5) +  Adinvg45 * dV4 - ad(kxi5*Vel(5))*(Adinvg45*V4);

% Joint 6:
g56 = g56_0 * expg(kxi6,Pos(6));
Adinvg56 = Adj(g56\eye(4));
V6  = Adinvg56 * V5 + kxi6*Vel(6);
dV6 = kxi6*Acc(6) +  Adinvg56 * dV5 - ad(kxi6*Vel(6))*(Adinvg56*V5);

% Angular velocity of motors
wm1 = 0         + k(1)*Acc(1)*zm1 + k(1)*Vel(1)*0;
wm2 = V1(4:6)   + k(2)*Acc(2)*zm2 + k(2)*Vel(2)*cross(V1(4:6),zm2);
wm3 = V2(4:6)   + k(3)*Acc(3)*zm3 + k(3)*Vel(3)*cross(V2(4:6),zm3);
wm4 = V3(4:6)   + k(4)*Acc(4)*zm4 + k(4)*Vel(4)*cross(V3(4:6),zm4);
wm5 = V4(4:6)   + k(5)*Acc(5)*zm5 + k(5)*Vel(5)*cross(V4(4:6),zm5);
wm6 = V4(4:6)   + k(6)*Acc(6)*zm6 + k(6)*Vel(6)*cross(V4(4:6),zm6);

% Effect of motor rotation
R1 = [0;0;0;(k(2)*Acc(2)*Imz(2))*zm2 + (k(2)*Vel(2)*Imz(2))*cross(V1(4:6),zm2)];
R2 = [0;0;0;(k(3)*Acc(3)*Imz(3))*zm3 + (k(3)*Vel(3)*Imz(3))*cross(V2(4:6),zm3)];
R3 = [0;0;0;(k(4)*Acc(4)*Imz(4))*zm4 + (k(4)*Vel(4)*Imz(4))*cross(V3(4:6),zm4)];
R4 = [0;0;0;(k(5)*Acc(5)*Imz(5))*zm5 + (k(5)*Vel(5)*Imz(5))*cross(V4(4:6),zm5) ...
           +(k(6)*Acc(6)*Imz(6))*zm6 + (k(6)*Vel(6)*Imz(6))*cross(V4(4:6),zm6)];
R5 = [0;0;0;0;0;0];
R6 = [0;0;0;0;0;0];

% %% Backward Recursion (inverse dynamic)
% Initial State
Tau=zeros(6,1);
F7 = Ft;
Adinvg67 = Adj(g67_0\eye(4));

% Joint 6
F6 = Adinvg67'* F7 + M6*dV6 - ad(V6)'*M6*V6 + R6;
Tau(6) = kxi6'* F6 + k(6)*Imz(6)*V6(4:6)'*zm6;

% Joint 5
F5 = Adinvg56'* F6 + M5*dV5 - ad(V5)'*M5*V5 + R5;
Tau(5) = kxi5'* F5 + k(5)*Imz(5)*V5(4:6)'*zm5;

% Joint 4
F4 = Adinvg45'* F5 + M4*dV4 - ad(V4)'*M4*V4 + R4;
Tau(4) = kxi4'* F4 + k(4)*Imz(4)*V4(4:6)'*zm4;

% Joint 3
F3 = Adinvg34'* F4 + M3*dV3 - ad(V3)'*M3*V3 + R3;
Tau(3) = kxi3'* F3 + k(3)*Imz(3)*V3(4:6)'*zm3;

% Joint 2
F2 = Adinvg23'* F3 + M2*dV2 - ad(V2)'*M2*V2 + R2;
Tau(2) = kxi2'* F2 + k(2)*Imz(2)*V2(4:6)'*zm2;

% Joint 1
F1 = Adinvg12'* F2 + M1*dV1 - ad(V1)'*M1*V1 + R1;
Tau(1) = kxi1'* F1 + k(1)*Imz(1)*V1(4:6)'*zm1;

Torque = Tau;









